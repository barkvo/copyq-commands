[Command]
Command="
    copyq:
    var suffices = {
      'image/svg': 'svg',
      'image/png': 'png',
      'image/jpeg': 'jpg',
      'image/jpg': 'jpg',
      'image/bmp': 'bmp',
      'text/html': 'html',
      'text/plain' : 'txt',
    }
    var savePath = Dir().homePath();
    var parseFileName = true;
    var fetchUrls = true;

    function hasSuffix(fileName)
    {
      return /\\.[0-9a-zA-z]+$/.test(fileName);
    }

    function addSuffix(fileName, format)
    {
      if (format === 'url') {
        var suffix = 'url';
      } else {
        var suffix = suffices[format]
      }
      return suffix ? fileName + \".\" + suffix : fileName
    }

    function filterFormats(format)
    {
      return /^[a-z]/.test(format) && !/^application\\/x/.test(format)
    }

    function itemFormats(row)
    {
      return str(read('?', row))
        .split('\\n')
        .filter(filterFormats)
    }

    function formatPriority(format)
    {
      var k = Object.keys(suffices);
      var i = k.indexOf(format);
      return i === -1 ? k.length : i
    }

    function reorderFormats(formats)
    {
      formats.sort(function(lhs, rhs){
        var i = formatPriority(lhs);
        var j = formatPriority(rhs);
        return i === j ? lhs.localeCompare(rhs) : i - j;
      })
    }

    function checkUrlFormat(row, formats)
    {
      var canParseFile = formats[0] === 'text/plain' || formats[0] === 'text/html';
      if(canParseFile) {
        var content = str(read(row));
        var splittedContent = content.split('\\n');
        var isUrl = splittedContent.length >= 1 && /^(ftp|http|https):\\/\\/[^ \"]+$/.test(splittedContent[0]);
        if (isUrl) {
          formats.unshift('url');
        }
      }
    }

    function lower(data) {
      return str(data).toLowerCase()
    }

    function isHtml(reply) {
      var headers = reply.headers
      for (var i in headers) {
        var header = headers[i]
        if (lower(header[0]) === 'content-type')
           return lower(header[1]).indexOf(mimeHtml) === 0
      }
      return false
    }

    function grep(content, re) {
      return content ? (re.exec(content) || [])[1] : ''
    }

    function fetchUrl(url)
    {
      url = url.trim();
      var reply = networkGet(url)
      if (isHtml(reply)) {
        var content = str(reply.data)
        var parsedTitle = grep(content, /<title[^>]*>([^<]*)<\\/title>/i);
        var title = parsedTitle ? parsedTitle.trim(): '';
        return title;
      } else {
        return false;
      }
    }

    function getDefaultName(row, formats)
    {
      var name = dateString('yyyy_MM_dd__HH_mm_ss');
      var canParseFile = formats[0] === 'text/plain' || formats[0] === 'text/html' || formats[0] === 'url';

      if(canParseFile) {
        var content = str(read(row));
        var splittedContent = content.split('\\n');
        if (fetchUrls) {
          var isUrl = splittedContent.length >= 1 && /^(ftp|http|https):\\/\\/[^ \"]+$/.test(splittedContent[0]);
          if (isUrl) {
            var fetchedName = fetchUrl(splittedContent[0]);
          }
          if (fetchedName) {
            name = fetchedName.replace(/[^a-zA-Zа-яА-Я0-9_]/g, '_').replace(/_{2,}/, '_');
            return name;   
          }
        }
        if(parseFileName) {
          var maxNameLength = 60;
          var suitableRows = splittedContent.filter(function(rowItem){
            return rowItem.replace(/[^a-zA-Zа-яА-Я0-9_]/g, '') !== '';
          });
          if (suitableRows.length) {
            name = suitableRows[0].substring(0, maxNameLength).trim().replace(/[^a-zA-Zа-яА-Я0-9_]/g, '_').replace(/_{2,}/, '_') + '_' + name;
            // todo trim underscores
            return name;
          }
        }
      }
      return name;
    }

    if (selectedtab()) tab(selectedtab())
    var row = selectedtab() ? currentitem() : -1
    var formats = itemFormats(row)
    reorderFormats(formats)

    checkUrlFormat(row, formats)

    currentpath(savePath)
    var defaultFileName = getDefaultName(row, formats);

    var keyFormat = 'Format'
    var keyFileName = 'File'
    var defaultFormat = formats[0]

    var result = dialog(
      '.title', 'Save Item As...',
      '.width', 350,
      keyFormat, [defaultFormat].concat(formats.filter(function(format){
        return format !== defaultFormat
      })),
      keyFileName, File(defaultFileName)
    ) || abort()
    

    var fileName = result[keyFileName]
    var format = result[keyFormat]

    if (!format || !fileName)
      abort()

    if (!hasSuffix(fileName))
      fileName = addSuffix(fileName, format)

    var writeContent = selectedtab() ? getitem(currentitem())[format] : clipboard(format);

    var f = File(fileName)
    if (!f.open()) {
      popup('Failed to open \"' + f.fileName() + '\"', f.errorString())
      abort()
    }

    if (format === 'url') {
      var content = str(read(row)).trim();
      var splittedContent = content.split('\\n');
      var comment = fileName;
      if (splittedContent.length > 1) {
        comment = splittedContent.slice(1).join(';') + ';' + comment;
      }
      writeContent = '[InternetShortcut]\\n\\rComment=' + comment + '\\n\\rURL=' + splittedContent[0];
    }

    f.write(writeContent);
    popup(\"Item Saved\", 'Item saved as \"' + f.fileName() + '\".')"
Icon=\xf0c7
InMenu=true
Name=Save As...
Shortcut=Ctrl+S
