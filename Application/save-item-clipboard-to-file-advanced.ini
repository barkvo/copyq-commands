[Command]
Command="
    copyq:
    var suffices = {
      'image/svg': 'svg',
      'image/png': 'png',
      'image/jpeg': 'jpg',
      'image/jpg': 'jpg',
      'image/bmp': 'bmp',
      'text/html': 'html',
      'text/plain': 'txt',
      'url': 'url'
    }
    var savePath = Dir().homePath();
    var parseFileName = true;
    var fetchUrls = true;

    var fileNameEscapedSymbolsRegexp = new RegExp('[^a-zA-Zа-яА-Я0-9_]', 'g');
    var urlRegexp = new RegExp('^(ftp|http|https):\\/\\/[^ \"]+$');

    function hasSuffix(fileName)
    {
      return /\\.[0-9a-zA-z]+$/.test(fileName);
    }

    function addSuffix(fileName, format)
    {
      return suffices[format] ? fileName + \".\" + suffices[format] : fileName;
    }

    function filterFormats(format)
    {
      return /^[a-z]/.test(format) && !/^application\\/x/.test(format)
    }

    function itemFormats(row)
    {
      return str(read('?', row))
        .split('\\n')
        .filter(filterFormats)
    }

    function formatPriority(format)
    {
      var k = Object.keys(suffices);
      var i = k.indexOf(format);
      return i === -1 ? k.length : i
    }

    function reorderFormats(formats)
    {
      formats.sort(function(lhs, rhs){
        var i = formatPriority(lhs);
        var j = formatPriority(rhs);
        return i === j ? lhs.localeCompare(rhs) : i - j;
      })
    }

    function fetchUrl(url) {
      
      function isHtml(reply) {
        var headers = reply.headers;
        for (var i in headers) {
          var header = headers[i];
          if ( str(header[0]).toLowerCase() === 'content-type') {
            return str(header[1]).toLowerCase().indexOf(mimeHtml) === 0;
          }
        }
        return false
      }

      function grep(content, re) {
        return content ? (re.exec(content) || [])[1] : ''
      }

      url = url.trim();
      var reply = networkGet(url)
      if (isHtml(reply)) {
        var content = str(reply.data)
        var parsedTitle = grep(content, /<title[^>]*>([^<]*)<\\/title>/i);
        var title = parsedTitle ? parsedTitle.trim(): '';
        return title;
      } else {
        return false;
      }
    }

    function formatFileName(input){
      var maxNameLength = 80;
      return input.substring(0, maxNameLength).trim().replace(fileNameEscapedSymbolsRegexp, '_').replace(/_{2,}/, '_');
    }

    if (selectedtab()) {
      tab(selectedtab());
    }
    var row = selectedtab() ? currentitem() : -1;
    var formats = itemFormats(row);
    reorderFormats(formats);

    var defaultFileName = dateString('yyyy-MM-dd-HHmmss');

    function parseFileContent(row) {
      var fileContent = str(read(row)); 
      var fileContentRows = fileContent.split('\\n');
      var urlRows = fileContentRows.filter(function(rowItem){
        return urlRegexp.test(rowItem);
      });
      var readableRows = fileContentRows.filter(function(rowItem){
        return rowItem.replace(fileNameEscapedSymbolsRegexp, '') !== '';
      });
      var readableNotUrlRows = readableRows.filter(function(rowItem){
        return !urlRegexp.test(rowItem);
      });
      return {
        content: fileContent,
        rows: fileContentRows,
        urlRows: urlRows,
        readableRows: readableRows,
        readableNotUrlRows: readableNotUrlRows
      };
    }

    var canParseFile = formats[0] === 'text/plain' || formats[0] === 'text/html';
    var fileContent;
    if (canParseFile) {
      fileContent = parseFileContent(row);
      
      var isUrlFile = !!fileContent.urlRows.length;
      if (isUrlFile) {
        formats.unshift('url');
      }

      var isDefaultFileName = true;

      if (isUrlFile && fetchUrls && fileContent.rows[0] === fileContent.urlRows[0]) {
        var fetchedName = fetchUrl(fileContent.urlRows[0]);
        if (fetchedName) {
          defaultFileName = formatFileName(fetchedName + '_' + defaultFileName);
          isDefaultFileName = false;
        } else if(fileContent.readableNotUrlRows.length){
          defaultFileName = formatFileName(fileContent.readableNotUrlRows[0] + '_' + defaultFileName);
          isDefaultFileName = false;
        }
      }
      if (parseFileName && isDefaultFileName) {
        defaultFileName = formatFileName(fileContent.readableRows[0] + '_' + defaultFileName);
        isDefaultFileName = false;
      }
    }

    currentpath(savePath);

    var keyFormat = 'Format';
    var keyFileName = 'File';
    var defaultFormat = formats[0];

    var result = dialog(
      '.title', 'Save Item As...',
      '.width', 350,
      keyFormat, [defaultFormat].concat(formats.filter(function(format){
        return format !== defaultFormat
      })),
      keyFileName, File(defaultFileName)
    ) || abort();
    
    var fileName = result[keyFileName];
    var format = result[keyFormat];

    if (!format || !fileName) {
      abort()
    }

    if (!hasSuffix(fileName)) {
      fileName = addSuffix(fileName, format)
    }

    var writeContent = selectedtab() ? getitem(currentitem())[format] : clipboard(format);

    var f = File(fileName)
    if (!f.open()) {
      popup('Failed to open \"' + f.fileName() + '\"', f.errorString())
      abort()
    }

    if (format === 'url') {
      writeContent = '[InternetShortcut]\\n';
      writeContent += 'FileName=' + fileName + '\\n';
      writeContent += 'URL=' + fileContent.urlRows[0];
      if (fileContent.rows.length > 1) {
        writeContent += '\\nContent=' + fileContent.rows.join(';') + '\\n';
      }
    }

    f.write(writeContent);
    popup(\"Item Saved\", 'Item saved as \"' + f.fileName() + '\".')"
Icon=\xf0c7
InMenu=true
Name=Save As...
Shortcut=Ctrl+S
